/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.udacity.bootstrap.AvroRecords;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DogRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8060885629258550289L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Dog\",\"namespace\":\"com.udacity.bootstrap\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"breed\",\"type\":\"string\"},{\"name\":\"origin\",\"type\":\"string\"},{\"name\":\"fk_owner_id\",\"type\":\"long\"},{\"name\":\"airTag\",\"type\":{\"type\":\"record\",\"name\":\"AirTag\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"brand\",\"type\":\"string\"},{\"name\":\"color\",\"type\":\"string\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DogRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DogRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DogRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DogRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DogRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Dog to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Dog from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Dog instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DogRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long id;
  private java.lang.CharSequence name;
  private java.lang.CharSequence breed;
  private java.lang.CharSequence origin;
  private long fk_owner_id;
  private AirTagRecord airTag;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DogRecord() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param name The new value for name
   * @param breed The new value for breed
   * @param origin The new value for origin
   * @param fk_owner_id The new value for fk_owner_id
   * @param airTag The new value for airTag
   */
  public DogRecord(java.lang.Long id, java.lang.CharSequence name, java.lang.CharSequence breed, java.lang.CharSequence origin, java.lang.Long fk_owner_id, AirTagRecord airTag) {
    this.id = id;
    this.name = name;
    this.breed = breed;
    this.origin = origin;
    this.fk_owner_id = fk_owner_id;
    this.airTag = airTag;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return breed;
    case 3: return origin;
    case 4: return fk_owner_id;
    case 5: return airTag;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: breed = (java.lang.CharSequence)value$; break;
    case 3: origin = (java.lang.CharSequence)value$; break;
    case 4: fk_owner_id = (java.lang.Long)value$; break;
    case 5: airTag = (AirTagRecord)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'breed' field.
   * @return The value of the 'breed' field.
   */
  public java.lang.CharSequence getBreed() {
    return breed;
  }


  /**
   * Sets the value of the 'breed' field.
   * @param value the value to set.
   */
  public void setBreed(java.lang.CharSequence value) {
    this.breed = value;
  }

  /**
   * Gets the value of the 'origin' field.
   * @return The value of the 'origin' field.
   */
  public java.lang.CharSequence getOrigin() {
    return origin;
  }


  /**
   * Sets the value of the 'origin' field.
   * @param value the value to set.
   */
  public void setOrigin(java.lang.CharSequence value) {
    this.origin = value;
  }

  /**
   * Gets the value of the 'fk_owner_id' field.
   * @return The value of the 'fk_owner_id' field.
   */
  public long getFkOwnerId() {
    return fk_owner_id;
  }


  /**
   * Sets the value of the 'fk_owner_id' field.
   * @param value the value to set.
   */
  public void setFkOwnerId(long value) {
    this.fk_owner_id = value;
  }

  /**
   * Gets the value of the 'airTag' field.
   * @return The value of the 'airTag' field.
   */
  public AirTagRecord getAirTag() {
    return airTag;
  }


  /**
   * Sets the value of the 'airTag' field.
   * @param value the value to set.
   */
  public void setAirTag(AirTagRecord value) {
    this.airTag = value;
  }

  /**
   * Creates a new Dog RecordBuilder.
   * @return A new Dog RecordBuilder
   */
  public static DogRecord.Builder newBuilder() {
    return new DogRecord.Builder();
  }

  /**
   * Creates a new Dog RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Dog RecordBuilder
   */
  public static DogRecord.Builder newBuilder(DogRecord.Builder other) {
    if (other == null) {
      return new DogRecord.Builder();
    } else {
      return new DogRecord.Builder(other);
    }
  }

  /**
   * Creates a new Dog RecordBuilder by copying an existing Dog instance.
   * @param other The existing instance to copy.
   * @return A new Dog RecordBuilder
   */
  public static DogRecord.Builder newBuilder(DogRecord other) {
    if (other == null) {
      return new DogRecord.Builder();
    } else {
      return new DogRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for Dog instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DogRecord>
    implements org.apache.avro.data.RecordBuilder<DogRecord> {

    private long id;
    private java.lang.CharSequence name;
    private java.lang.CharSequence breed;
    private java.lang.CharSequence origin;
    private long fk_owner_id;
    private AirTagRecord airTag;
    private AirTagRecord.Builder airTagBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(DogRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.breed)) {
        this.breed = data().deepCopy(fields()[2].schema(), other.breed);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.origin)) {
        this.origin = data().deepCopy(fields()[3].schema(), other.origin);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.fk_owner_id)) {
        this.fk_owner_id = data().deepCopy(fields()[4].schema(), other.fk_owner_id);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.airTag)) {
        this.airTag = data().deepCopy(fields()[5].schema(), other.airTag);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasAirTagBuilder()) {
        this.airTagBuilder = AirTagRecord.newBuilder(other.getAirTagBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Dog instance
     * @param other The existing instance to copy.
     */
    private Builder(DogRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.breed)) {
        this.breed = data().deepCopy(fields()[2].schema(), other.breed);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.origin)) {
        this.origin = data().deepCopy(fields()[3].schema(), other.origin);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.fk_owner_id)) {
        this.fk_owner_id = data().deepCopy(fields()[4].schema(), other.fk_owner_id);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.airTag)) {
        this.airTag = data().deepCopy(fields()[5].schema(), other.airTag);
        fieldSetFlags()[5] = true;
      }
      this.airTagBuilder = null;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public DogRecord.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public DogRecord.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public DogRecord.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public DogRecord.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'breed' field.
      * @return The value.
      */
    public java.lang.CharSequence getBreed() {
      return breed;
    }


    /**
      * Sets the value of the 'breed' field.
      * @param value The value of 'breed'.
      * @return This builder.
      */
    public DogRecord.Builder setBreed(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.breed = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'breed' field has been set.
      * @return True if the 'breed' field has been set, false otherwise.
      */
    public boolean hasBreed() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'breed' field.
      * @return This builder.
      */
    public DogRecord.Builder clearBreed() {
      breed = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'origin' field.
      * @return The value.
      */
    public java.lang.CharSequence getOrigin() {
      return origin;
    }


    /**
      * Sets the value of the 'origin' field.
      * @param value The value of 'origin'.
      * @return This builder.
      */
    public DogRecord.Builder setOrigin(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.origin = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'origin' field has been set.
      * @return True if the 'origin' field has been set, false otherwise.
      */
    public boolean hasOrigin() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'origin' field.
      * @return This builder.
      */
    public DogRecord.Builder clearOrigin() {
      origin = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'fk_owner_id' field.
      * @return The value.
      */
    public long getFkOwnerId() {
      return fk_owner_id;
    }


    /**
      * Sets the value of the 'fk_owner_id' field.
      * @param value The value of 'fk_owner_id'.
      * @return This builder.
      */
    public DogRecord.Builder setFkOwnerId(long value) {
      validate(fields()[4], value);
      this.fk_owner_id = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'fk_owner_id' field has been set.
      * @return True if the 'fk_owner_id' field has been set, false otherwise.
      */
    public boolean hasFkOwnerId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'fk_owner_id' field.
      * @return This builder.
      */
    public DogRecord.Builder clearFkOwnerId() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'airTag' field.
      * @return The value.
      */
    public AirTagRecord getAirTag() {
      return airTag;
    }


    /**
      * Sets the value of the 'airTag' field.
      * @param value The value of 'airTag'.
      * @return This builder.
      */
    public DogRecord.Builder setAirTag(AirTagRecord value) {
      validate(fields()[5], value);
      this.airTagBuilder = null;
      this.airTag = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'airTag' field has been set.
      * @return True if the 'airTag' field has been set, false otherwise.
      */
    public boolean hasAirTag() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'airTag' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public AirTagRecord.Builder getAirTagBuilder() {
      if (airTagBuilder == null) {
        if (hasAirTag()) {
          setAirTagBuilder(AirTagRecord.newBuilder(airTag));
        } else {
          setAirTagBuilder(AirTagRecord.newBuilder());
        }
      }
      return airTagBuilder;
    }

    /**
     * Sets the Builder instance for the 'airTag' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public DogRecord.Builder setAirTagBuilder(AirTagRecord.Builder value) {
      clearAirTag();
      airTagBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'airTag' field has an active Builder instance
     * @return True if the 'airTag' field has an active Builder instance
     */
    public boolean hasAirTagBuilder() {
      return airTagBuilder != null;
    }

    /**
      * Clears the value of the 'airTag' field.
      * @return This builder.
      */
    public DogRecord.Builder clearAirTag() {
      airTag = null;
      airTagBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DogRecord build() {
      try {
        DogRecord record = new DogRecord();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.breed = fieldSetFlags()[2] ? this.breed : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.origin = fieldSetFlags()[3] ? this.origin : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.fk_owner_id = fieldSetFlags()[4] ? this.fk_owner_id : (java.lang.Long) defaultValue(fields()[4]);
        if (airTagBuilder != null) {
          try {
            record.airTag = this.airTagBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("airTag"));
            throw e;
          }
        } else {
          record.airTag = fieldSetFlags()[5] ? this.airTag : (AirTagRecord) defaultValue(fields()[5]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DogRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<DogRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DogRecord>
    READER$ = (org.apache.avro.io.DatumReader<DogRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    out.writeString(this.name);

    out.writeString(this.breed);

    out.writeString(this.origin);

    out.writeLong(this.fk_owner_id);

    this.airTag.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      this.breed = in.readString(this.breed instanceof Utf8 ? (Utf8)this.breed : null);

      this.origin = in.readString(this.origin instanceof Utf8 ? (Utf8)this.origin : null);

      this.fk_owner_id = in.readLong();

      if (this.airTag == null) {
        this.airTag = new AirTagRecord();
      }
      this.airTag.customDecode(in);

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 2:
          this.breed = in.readString(this.breed instanceof Utf8 ? (Utf8)this.breed : null);
          break;

        case 3:
          this.origin = in.readString(this.origin instanceof Utf8 ? (Utf8)this.origin : null);
          break;

        case 4:
          this.fk_owner_id = in.readLong();
          break;

        case 5:
          if (this.airTag == null) {
            this.airTag = new AirTagRecord();
          }
          this.airTag.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










